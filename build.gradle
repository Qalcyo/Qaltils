/*
 * Wyvtils, a utility mod for 1.8.9.
 * Copyright (C) 2021 Wyvtils
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

plugins {
    id "java"
    id "org.jetbrains.kotlin.jvm" version "1.5.30"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "net.minecraftforge.gradle.forge" version "ddb1eb0"
    id "org.spongepowered.mixin" version "d5f9873"
}

version = mod_ver
group = "xyz.qalcyo"
archivesBaseName = "$mod_name [1.8.9]"

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
    }
}

minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"
    mappings = "stable_22"
    replace("@NAME@", mod_name)
    replace("@VER@": mod_ver)
    replace("@ID@", mod_id)
    makeObfSourceJar = false

    clientRunArgs += "--tweakClass xyz.qalcyo.requisiteessentialloader.RequisiteEssentialTweaker"
    clientRunArgs += "--mixin mixins.${mod_id}.json"
}

configurations {
    // Creates an extra configuration that extends from `implementation` to be used later as the configuration that shades libraries
    include
    implementation.extendsFrom include
}

repositories {
    mavenCentral()
    maven { url "https://repo.sk1er.club/repository/maven-releases/" }
    maven { url "https://jitpack.io/" }
    maven { url "https://repo.spongepowered.org/repository/maven-public/" }
}

dependencies {
    implementation files ("1.8.9.jar")
    include "com.github.Qalcyo:RequisiteEssentialLoader:0a78589683"
    implementation "xyz.matthewtgm:RequisiteLaunchwrapper:1.1"
    implementation "gg.essential:loader-launchwrapper:1.1.1"
    implementation "gg.essential:essential-1.8.9-forge:1459+release-launch"

    annotationProcessor "org.spongepowered:mixin:0.7.11-SNAPSHOT"
}

jar {
    manifest.attributes(
            "ModSide": "CLIENT",
            "ForceLoadAsMod": true,
            "MixinConfigs": "mixins.${mod_id}.json",
            "TweakClass": "xyz.qalcyo.requisiteessentialloader.RequisiteEssentialTweaker",
            "TweakOrder": "0"
    )

    enabled = false
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
        include "bundle.project.json"

        expand(
                "version": project.version,
                "mcversion": project.minecraft.version
        )
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
        exclude "bundle.project.json"
    }
}

tasks.reobfJar.dependsOn tasks.shadowJar

shadowJar {
    archiveClassifier.set("")
    configurations = [project.configurations.include]
    duplicatesStrategy DuplicatesStrategy.EXCLUDE

    exclude "LICENSE.md"
    exclude "pack.mcmeta"
    exclude "dummyThing"
    exclude "**/module-info.class"
    exclude "*.so"
    exclude "*.dylib"
    exclude "*.dll"
    exclude "*.jnilib"
    exclude "ibxm/**"
    exclude "com/jcraft/**"
    exclude "org/lwjgl/**"
    exclude "net/java/**"

    exclude "META-INF/proguard/**"
    exclude "META-INF/maven/**"
    exclude "META-INF/versions/**"
    exclude "META-INF/com.android.tools/**"

    exclude "fabric.mod.json"
}

mixin {
    disableRefMapWarning = true
    defaultObfuscationEnv searge
    add sourceSets.main, "mixins.${mod_id}.refmap.json"
}

reobf {
    shadowJar {
        classpath = sourceSets.main.compileClasspath
    }
}

sourceSets {
    main {
        ext.refMap = "mixins.${mod_id}.refmap.json"
        output.resourcesDir = file("${buildDir}/classes/kotlin/main")
    }
}

