plugins {
    id "java"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "net.minecraftforge.gradle.forge" version "86b2392"
    id "org.jetbrains.kotlin.jvm" version "1.5.21"
    id "org.spongepowered.mixin" version "d5f9873d60"
}

ext.kotlin_version = "1.5.21"

version = "0.5.0-BETA4"
group = "net.wyvest"
archivesBaseName = "Wyvtilities"

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
    }
}

minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"
    mappings = "stable_22"
    makeObfSourceJar = false
    clientJvmArgs += "-Dfml.coreMods.load=net.wyvest.wyvtilities.mixin.WyvtilsLoadingPlugin"
    clientJvmArgs += "-Delementa.dev=true"
    clientRunArgs += "--tweakClass gg.essential.loader.stage0.EssentialSetupTweaker"
    clientRunArgs += "--mixin mixins.wyvtils.json"
}

configurations {
    // Creates an extra configuration that implements `implementation` to be used later as the configuration that shades libraries
    include
    implementation.extendsFrom(include)
}

dependencies {
    implementation 'org.projectlombok:lombok:1.18.18'
    annotationProcessor("org.spongepowered:mixin:0.7.11-SNAPSHOT")

    include "gg.essential:loader-launchwrapper:1.0.2"
    implementation "gg.essential:Essential:1222-10809-SNAPSHOT"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    include "dev.isXander.kotlin-forge-api:forge-event-dsl:481f620"
    implementation 'dev.isXander.kotlin-forge-api:forge-chat-dsl:79de650'


    implementation('xyz.matthewtgm:TGMLib:2.5.2')

}

jar {
    manifest {
        attributes "ModSide": "CLIENT",
                "FMLCorePlugin": "net.wyvest.wyvtilities.mixin.WyvtilsLoadingPlugin",
                "FMLCorePluginContainsFMLMod": "Wyvest",
                "ForceLoadAsMod": true,
                "MixinConfigs": "mixins.wyvtils.json",
                "TweakClass": "gg.essential.loader.stage0.EssentialSetupTweaker",
                "TweakOrder": "0"
    }
    enabled = false
}

/**
 * This task simply replaces the `${version}` and `${mcversion}` properties in the mcmod.info with the data from Gradle
 */
processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

// This forces the build task to run shadowJar after
tasks.reobfJar.dependsOn(tasks.shadowJar)

// This adds support to ("embed", "shade", "include") libraries into our JAR
shadowJar {
    archiveClassifier.set("")
    configurations = [project.configurations.include]
    duplicatesStrategy DuplicatesStrategy.EXCLUDE

    exclude "LICENSE.md"
    exclude "pack.mcmeta"
    exclude "dummyThing"
    exclude "**/module-info.class"
    exclude "*.so"
    exclude "*.dylib"
    exclude "*.dll"
    exclude "*.jnilib"
    exclude "ibxm/**"
    exclude "com/jcraft/**"
    exclude "org/lwjgl/**"
    exclude "net/java/**"

    exclude "META-INF/proguard/**"
    exclude "META-INF/maven/**"
    exclude "META-INF/versions/**"
    exclude "META-INF/com.android.tools/**"

    exclude "fabric.mod.json"
}

repositories {
    mavenCentral()
    maven { url "https://repo.sk1er.club/repository/maven-public/" }
    maven {
        name = "JitPack"
        url = 'https://jitpack.io/'
    }
    maven { url "https://repo.spongepowered.org/repository/maven-public/" }
}

mixin {
    disableRefMapWarning = true
    defaultObfuscationEnv searge
    add sourceSets.main, "mixins.wyvtils.refmap.json"
}

reobf {
    shadowJar {
        classpath = sourceSets.main.compileClasspath
    }
}
sourceSets {
    main {
        ext.refMap = "mixins.wyvtils.refmap.json"
        output.resourcesDir = file("${buildDir}/classes/kotlin/main")
    }
}

